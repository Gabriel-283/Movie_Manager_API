// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Movie.Infra.EfCore;
using System;

namespace MovieAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
       protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("MovieAPI.Models.Address", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Neighborhood")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("Number")
                    .HasColumnType("int");

                b.Property<string>("Street")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("ZipCode")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.ToTable("Address");
            });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("AgeGroup")
                    .HasColumnType("int");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Director")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("Duration")
                    .HasColumnType("int");

                b.Property<string>("MovieKind")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Movies");
            });

            modelBuilder.Entity("MovieAPI.Models.MovieTheater", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("AddressId")
                    .HasColumnType("int");

                b.Property<int>("MovieTheaterManagerId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("AddressId")
                    .IsUnique();

                b.HasIndex("MovieTheaterManagerId");

                b.ToTable("MovieTheater");
            });

            modelBuilder.Entity("MovieAPI.Models.MovieTheaterManager", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("MovieTheaterManager");
            });

            modelBuilder.Entity("MovieAPI.Models.Session", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<DateTime>("EndSession")
                    .HasColumnType("datetime");

                b.Property<int>("MovieId")
                    .HasColumnType("int");

                b.Property<int>("MovieTheaterId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("MovieId");

                b.HasIndex("MovieTheaterId");

                b.ToTable("Session");
            });

            modelBuilder.Entity("MovieAPI.Models.MovieTheater", b =>
            {
                b.HasOne("MovieAPI.Models.Address", "Address")
                    .WithOne("MovieTheater")
                    .HasForeignKey("MovieAPI.Models.MovieTheater", "AddressId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("MovieAPI.Models.MovieTheaterManager", "MovieTheaterManager")
                    .WithMany("MovieTheaters")
                    .HasForeignKey("MovieTheaterManagerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Address");

                b.Navigation("MovieTheaterManager");
            });

            modelBuilder.Entity("MovieAPI.Models.Session", b =>
            {
                b.HasOne("MovieAPI.Models.Movie", "Movie")
                    .WithMany("Sessions")
                    .HasForeignKey("MovieId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("MovieAPI.Models.MovieTheater", "MovieTheater")
                    .WithMany("Sessions")
                    .HasForeignKey("MovieTheaterId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Movie");

                b.Navigation("MovieTheater");
            });

            modelBuilder.Entity("MovieAPI.Models.Address", b =>
            {
                b.Navigation("MovieTheater");
            });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
            {
                b.Navigation("Sessions");
            });

            modelBuilder.Entity("MovieAPI.Models.MovieTheater", b =>
            {
                b.Navigation("Sessions");
            });

            modelBuilder.Entity("MovieAPI.Models.MovieTheaterManager", b =>
            {
                b.Navigation("MovieTheaters");
            });
#pragma warning restore 612, 618
        }
    }
}
